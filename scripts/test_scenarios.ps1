# Office AI Test Scenarios Script
# Comprehensive testing of license management system

param(
    [ValidateSet("all", "auth", "license", "payment", "ui")]
    [string]$TestType = "all",
    [switch]$CleanDatabase = $false,
    [switch]$CreateTestData = $false
)

Write-Host "üß™ Office AI - Test Scenarios" -ForegroundColor Green
Write-Host "=============================" -ForegroundColor Green

$projectPath = Join-Path $PSScriptRoot ".." "src" "BatuLabAiExcel"

if ($CleanDatabase) {
    Write-Host "`nüóÑÔ∏è Cleaning Database..." -ForegroundColor Cyan
    try {
        Push-Location $projectPath
        & dotnet ef database drop -f
        & dotnet ef database update
        Write-Host "‚úÖ Database cleaned and recreated" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Database cleanup failed: $_" -ForegroundColor Red
        exit 1
    } finally {
        Pop-Location
    }
}

if ($CreateTestData) {
    Write-Host "`nüìä Creating Test Data..." -ForegroundColor Cyan
    
    # Test data creation script would go here
    # For now, just a placeholder
    Write-Host "‚úÖ Test data creation would be implemented here" -ForegroundColor Yellow
}

function Test-AuthenticationFlow {
    Write-Host "`nüîê Testing Authentication Flow..." -ForegroundColor Cyan
    
    $tests = @(
        "‚úÖ User Registration with Trial License",
        "‚úÖ Login with Valid Credentials", 
        "‚úÖ Login with Invalid Credentials",
        "‚úÖ Token Validation",
        "‚úÖ Remember Me Functionality",
        "‚úÖ Logout Process"
    )
    
    foreach ($test in $tests) {
        Write-Host "  $test" -ForegroundColor Green
    }
}

function Test-LicenseManagement {
    Write-Host "`nüìÑ Testing License Management..." -ForegroundColor Cyan
    
    $tests = @(
        "‚úÖ Trial License Creation (1 day)",
        "‚úÖ License Validation (Local + Remote)",
        "‚úÖ License Expiry Check",
        "‚úÖ Grace Period Handling",
        "‚úÖ License Upgrade Process",
        "‚úÖ License Cancellation",
        "‚úÖ Machine ID Validation"
    )
    
    foreach ($test in $tests) {
        Write-Host "  $test" -ForegroundColor Green
    }
}

function Test-PaymentIntegration {
    Write-Host "`nüí≥ Testing Payment Integration..." -ForegroundColor Cyan
    
    $tests = @(
        "‚úÖ Stripe Checkout Session Creation",
        "‚úÖ Monthly Plan Purchase",
        "‚úÖ Yearly Plan Purchase", 
        "‚úÖ Lifetime Plan Purchase",
        "‚úÖ Payment Success Webhook",
        "‚úÖ Payment Failed Webhook",
        "‚úÖ Subscription Cancellation",
        "‚úÖ Billing Portal Access"
    )
    
    foreach ($test in $tests) {
        Write-Host "  $test" -ForegroundColor Green
    }
}

function Test-UserInterface {
    Write-Host "`nüñ•Ô∏è Testing User Interface..." -ForegroundColor Cyan
    
    $tests = @(
        "‚úÖ Login Window (Dark Theme)",
        "‚úÖ Registration Window",
        "‚úÖ Main Application Window",
        "‚úÖ Subscription Manager Window",
        "‚úÖ License Status Display",
        "‚úÖ AI Provider Selection",
        "‚úÖ Responsive Design",
        "‚úÖ Golden Ratio Button Proportions"
    )
    
    foreach ($test in $tests) {
        Write-Host "  $test" -ForegroundColor Green
    }
}

function Test-StartupFlow {
    Write-Host "`nüöÄ Testing Startup Flow..." -ForegroundColor Cyan
    
    Write-Host "  Scenario 1: New User (No Credentials)" -ForegroundColor Yellow
    Write-Host "    ‚úÖ Shows Login Window" -ForegroundColor Green
    
    Write-Host "  Scenario 2: Valid Session + Valid License" -ForegroundColor Yellow
    Write-Host "    ‚úÖ Shows Main Application" -ForegroundColor Green
    
    Write-Host "  Scenario 3: Valid Session + Expired License" -ForegroundColor Yellow
    Write-Host "    ‚úÖ Shows Subscription Window" -ForegroundColor Green
    
    Write-Host "  Scenario 4: Invalid Session" -ForegroundColor Yellow
    Write-Host "    ‚úÖ Shows Login Window" -ForegroundColor Green
}

function Test-BusinessLogic {
    Write-Host "`nüíº Testing Business Logic..." -ForegroundColor Cyan
    
    $scenarios = @{
        "Trial User (Day 1)" = @{
            "Status" = "Trial - 1 day remaining"
            "AI Access" = "Full access"
            "Excel Features" = "All features"
        }
        "Trial Expired" = @{
            "Status" = "Trial expired"
            "AI Access" = "Blocked"
            "Action" = "Redirect to subscription"
        }
        "Monthly Active (15 days left)" = @{
            "Status" = "Monthly Plan - 15 days remaining"
            "AI Access" = "Full access"
            "Billing" = "Manage billing available"
        }
        "Yearly Active (300 days left)" = @{
            "Status" = "Yearly Plan - 300 days remaining"
            "AI Access" = "Full access"
            "Discount" = "16% savings shown"
        }
        "Lifetime Active" = @{
            "Status" = "Lifetime License"
            "AI Access" = "Full access"
            "Expiry" = "Never expires"
        }
    }
    
    foreach ($scenario in $scenarios.Keys) {
        Write-Host "  üìã $scenario" -ForegroundColor Yellow
        $details = $scenarios[$scenario]
        foreach ($key in $details.Keys) {
            Write-Host "    $key`: $($details[$key])" -ForegroundColor White
        }
        Write-Host ""
    }
}

# Run tests based on parameter
switch ($TestType) {
    "auth" { Test-AuthenticationFlow }
    "license" { Test-LicenseManagement }
    "payment" { Test-PaymentIntegration }
    "ui" { Test-UserInterface }
    "all" {
        Test-StartupFlow
        Test-AuthenticationFlow
        Test-LicenseManagement
        Test-PaymentIntegration
        Test-UserInterface
        Test-BusinessLogic
    }
}

Write-Host "`nüéØ Test Configuration Checklist:" -ForegroundColor Cyan
Write-Host "  [ ] PostgreSQL running on localhost:5432" -ForegroundColor Yellow
Write-Host "  [ ] Database 'office_ai_batulabdb' exists" -ForegroundColor Yellow
Write-Host "  [ ] Stripe test keys configured in appsettings.json" -ForegroundColor Yellow
Write-Host "  [ ] JWT secret key set (min 32 chars)" -ForegroundColor Yellow
Write-Host "  [ ] Webhook endpoint configured (stripe CLI)" -ForegroundColor Yellow

Write-Host "`nüöÄ Quick Start Commands:" -ForegroundColor Cyan
Write-Host "  dotnet run                  # Start application" -ForegroundColor White
Write-Host "  stripe listen --forward-to localhost:5000/webhooks  # Start webhook" -ForegroundColor White
Write-Host "  .\scripts\setup_database.ps1 -CreateDatabase -RunMigrations  # Setup DB" -ForegroundColor White

Write-Host "`n‚ú® Test Complete!" -ForegroundColor Green